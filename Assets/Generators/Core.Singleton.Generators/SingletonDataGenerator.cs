// Generators/SingletonDataGenerator.cs
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Core.Singleton.Generators
{
    [Generator]
    public class SingletonDataGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var singletonDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (s, _) => IsSingletonClass(s),
                    transform: static (ctx, _) => GetSingletonInfo(ctx))
                .Where(static m => m is not null);

            context.RegisterSourceOutput(singletonDeclarations, 
                (spc, info) => GenerateSource(spc, info));
        }

        private static bool IsSingletonClass(SyntaxNode node)
        {
            return node is ClassDeclarationSyntax classDecl &&
                   classDecl.BaseList?.Types.Any(t => 
                   t.ToString().Contains("PersistentSingleton")) == true;
        }

        private static SingletonInfo GetSingletonInfo(GeneratorSyntaxContext context)
        {
            var classDeclaration = (ClassDeclarationSyntax)context.Node;
            var semanticModel = context.SemanticModel;

            // Extract the namespace
            var namespaceName = classDeclaration.Ancestors()
                .OfType<NamespaceDeclarationSyntax>()
                .FirstOrDefault()?.Name.ToString() ?? string.Empty;

            var fields = new List<SerializedFieldModel>();

            foreach (var member in classDeclaration.Members)
            {
                if (member is not FieldDeclarationSyntax fieldDecl)
                    continue;

                var serializeAttr = fieldDecl.AttributeLists
                    .SelectMany(al => al.Attributes)
                    .FirstOrDefault(a => a.Name.ToString() == "SerializeData");

                if (serializeAttr == null)
                    continue;

                var fieldSymbol = semanticModel.GetDeclaredSymbol(
                    fieldDecl.Declaration.Variables.First()) as IFieldSymbol;

                if (fieldSymbol == null)
                    continue;

                fields.Add(new SerializedFieldModel(
                    fieldSymbol.Name,
                    fieldSymbol.Type.ToString(),
                    GetAttributeValue(serializeAttr, 0, "Default"),
                    GetAttributeValue(serializeAttr, 1, ""),
                    fieldSymbol.Type.ToString().Contains("AssetReference")
                ));
            }

            return new SingletonInfo(
                classDeclaration.Identifier.ToString(),
                namespaceName,
                fields
            );
        }

        private static string GetAttributeValue(AttributeSyntax attribute, int index, string defaultValue)
        {
            return attribute.ArgumentList.Arguments.Count > index
                ? attribute.ArgumentList.Arguments[index].ToString() ?? defaultValue
                : defaultValue;
        }

        private void GenerateSource(SourceProductionContext context, SingletonInfo singleton)
        {
            // Generate data structure
            var dataStructure = GenerateDataStructure(singleton);
            context.AddSource(
                $"{singleton.ClassName}Data.g.cs",
                SourceText.From(dataStructure, Encoding.UTF8));

            // Generate implementation
            var implementation = GenerateImplementation(singleton);
            context.AddSource(
                $"{singleton.ClassName}.g.cs",
                SourceText.From(implementation, Encoding.UTF8));

            // Generate link.xml entry
            GenerateLinkXmlEntry(context, singleton);
        }

        private string GenerateDataStructure(SingletonInfo singleton)
        {
            var builder = new StringBuilder();
            builder.AppendLine(@"// <auto-generated/>
using MemoryPack;
using UnityEngine;

#nullable enable");

            if (!string.IsNullOrEmpty(singleton.Namespace))
            {
                builder.AppendLine($@"
namespace {singleton.Namespace}
{{");
            }

            builder.AppendLine($@"
    [MemoryPackable]
    public partial struct {singleton.ClassName}Data
    {{");

            foreach (var field in singleton.Fields)
            {
                builder.AppendLine($@"
        /// <summary>
        /// {field.Description}
        /// Category: {field.Category}
        /// </summary>
        [MemoryPackInclude]
        public {field.SerializedTypeName} {field.Name};");
            }

            builder.AppendLine(@"    }");

            if (!string.IsNullOrEmpty(singleton.Namespace))
            {
                builder.AppendLine("}");
            }

            return builder.ToString();
        }

        private string GenerateImplementation(SingletonInfo singleton)
        {
            var builder = new StringBuilder();
            builder.AppendLine(@"// <auto-generated/>
using System.Threading;
using Cysharp.Threading.Tasks;

#nullable enable");

            if (!string.IsNullOrEmpty(singleton.Namespace))
            {
                builder.AppendLine($@"
namespace {singleton.Namespace}
{{");
            }

            builder.AppendLine($@"
    public partial class {singleton.ClassName} : IGeneratedDataOperations
    {{
        private {singleton.ClassName}Data _data;

        public async UniTask LoadDataAsync(CancellationToken cancellation)
        {{
            _data = await SingletonDataSerializer.LoadDataAsync<{singleton.ClassName}Data>(
                GetType(),
                cancellation);
            ApplyData(_data);
        }}

        public async UniTask SaveDataAsync(CancellationToken cancellation)
        {{
            await SingletonDataSerializer.SaveDataAsync(
                GetType(),
                _data,
                cancellation);
        }}

        private void ApplyData({singleton.ClassName}Data data)
        {{
            foreach (var field in data.GetType().GetFields())
            {{
                var value = field.GetValue(data);
                var thisField = this.GetType().GetField(field.Name);
                thisField?.SetValue(this, value);
            }}
        }}
    }}");

            if (!string.IsNullOrEmpty(singleton.Namespace))
            {
                builder.AppendLine("}");
            }

            return builder.ToString();
        }

        private void GenerateLinkXmlEntry(SourceProductionContext context, SingletonInfo singleton)
        {
            var linkXmlEntry = $@"    <type fullname=""{singleton.FullTypeName}"" preserve=""all""/>
    <type fullname=""{singleton.FullTypeName}Data"" preserve=""all""/>";

            context.AddSource(
                $"{singleton.ClassName}.link.g.cs",
                SourceText.From(linkXmlEntry, Encoding.UTF8));
        }
    }

    internal class SingletonInfo
    {
        public string ClassName { get; }
        public string Namespace { get; }
        public List<SerializedFieldModel> Fields { get; }
        public string FullTypeName => string.IsNullOrEmpty(Namespace) 
            ? ClassName 
            : $"{Namespace}.{ClassName}";

        public SingletonInfo(string className, string @namespace, List<SerializedFieldModel> fields)
        {
            ClassName = className;
            Namespace = @namespace;
            Fields = fields;
        }
    }

    internal class SerializedFieldModel
    {
        public string Name { get; }
        public string TypeName { get; }
        public string Category { get; }
        public string Description { get; }
        public bool IsAssetReference { get; }
        public string SerializedTypeName => IsAssetReference ? "SerializedAssetReference" : TypeName;

        public SerializedFieldModel(string name, string typeName, string category, string description, bool isAssetReference)
        {
            Name = name;
            TypeName = typeName;
            Category = category;
            Description = description;
            IsAssetReference = isAssetReference;
        }
    }
}
